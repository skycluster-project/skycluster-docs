apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xsaviinstance-composition
spec:
  compositeTypeRef:
    apiVersion: xrds.skycluster.io/v1alpha1
    kind: XSAVIInstance
  mode: Pipeline
  pipeline:
    - step: pull-extra-resources
      functionRef:
        name: function-extra-resources
      input:
        apiVersion: extra-resources.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          extraResources:
            - kind: NetworkV2
              into: NetworkV2
              apiVersion: networking.openstack.crossplane.io/v1alpha1
              type: Selector # or Reference
              selector:
                maxMatch: 1
                minMatch: 1
                matchLabels:
                  - key: skycluster.io/managed-by
                    type: Value # it could be FromCompositeFieldPath
                    value: skycluster
                  - key: skycluster.io/app-name
                    type: FromCompositeFieldPath
                    valueFromFieldPath: metadata.labels["skycluster.io/app-name"]
                  - key: skycluster.io/environment
                    type: FromCompositeFieldPath
                    valueFromFieldPath: metadata.labels["skycluster.io/environment"]
                  - key: skycluster.io/provider-name
                    type: FromCompositeFieldPath
                    valueFromFieldPath: metadata.labels["skycluster.io/provider-name"]
                  - key: skycluster.io/provider-region
                    type: FromCompositeFieldPath
                    valueFromFieldPath: metadata.labels["skycluster.io/provider-region"]
    - step: create-an-instance
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- $ProviderName := .observed.composite.resource.spec.provider.name }}
            {{- $ProviderRegion := .observed.composite.resource.spec.provider.region }}
            {{- $ProviderZone := .observed.composite.resource.spec.provider.zone }}
            {{- $Observed := .observed.composite.resource }} 
            {{- $ProviderSpec := $Observed.spec.forProvider }}
            {{- $ExtraResources := dig "apiextensions.crossplane.io/extra-resources" "" .context }}
            {{- $NetworkData := index $ExtraResources.NetworkV2 0 }}

            {{ $ObjectName := printf "%s" $Observed.metadata.name }} 
            apiVersion: compute.openstack.crossplane.io/v1alpha1 
            kind: InstanceV2
            metadata:
              labels:
                skycluster.io/managed-by: skycluster
                skycluster.io/app-name: {{ index $Observed.metadata.labels "skycluster.io/app-name" }}
                skycluster.io/environment: {{ index $Observed.metadata.labels "skycluster.io/environment" }}
                skycluster.io/provider-name: {{ $ProviderName }}
                skycluster.io/provider-region: {{ $ProviderRegion }}
                skycluster.io/provider-zone: {{ $ProviderZone }}
              annotations: 
                {{ setResourceNameAnnotation "instance" }}
            spec:
              forProvider:
                name: {{ $ObjectName }}
                flavorName: {{ $ProviderSpec.flavorName }}
                imageName: {{ $ProviderSpec.imageName }}
                keyPairSelector:
                  matchLabels:
                    skycluster.io/managed-by: skycluster
                    skycluster.io/app-name: {{ index $Observed.metadata.labels "skycluster.io/app-name" }}
                    skycluster.io/environment: {{ index $Observed.metadata.labels "skycluster.io/environment" }}
                    skycluster.io/provider-name: {{ $ProviderName }}
                    skycluster.io/provider-region: {{ $ProviderRegion }}
                    skycluster.io/provider-zone: {{ $ProviderZone }}
                network:
                {{- if not (empty $ProviderSpec.portId ) }}
                - port: {{ $ProviderSpec.portId }}
                {{- else }}
                - uuid: {{ $NetworkData.status.atProvider.id }}
                {{- end }}
                securityGroupsSelector:
                  matchLabels: 
                    skycluster.io/managed-by: skycluster
                    skycluster.io/app-name: {{ index $Observed.metadata.labels "skycluster.io/app-name" }}
                    skycluster.io/environment: {{ index $Observed.metadata.labels "skycluster.io/environment" }}
                    skycluster.io/provider-name: {{ $ProviderName }}
                    skycluster.io/provider-region: {{ $ProviderRegion }}
                    skycluster.io/provider-zone: {{ $ProviderZone }}
                userData: |
                  {{- nindent 6 ($ProviderSpec.cloudInit | trim) }}
              providerConfigRef:
                name: {{- if eq $ProviderRegion "scinet" }} "provider-cfg-os-scinet" {{- else }} "provider-cfg-os-vaughan" {{- end }}
    - step: patch-and-transform
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: instance
            patches:
              - type: ToCompositeFieldPath
                fromFieldPath: "status.atProvider.accessIpV4"
                toFieldPath: "status.atProvider.network.privateIpAddress"
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: function-auto-ready